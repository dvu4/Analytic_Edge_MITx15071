exp(-4.2411574 +  0.3869904*1 + 0.8867192*1 + -0.0001756*50 + 0.4433007*0+ 0.8349797*0  + -3.3967878*0 + -0.1238867*3 + 0.0802954*12 + 1.6119919*0 + 0.6837143*0 + -0.2781054*0 + -0.0117627*0)
-4.2411574 +  0.3869904*1 + 0.8867192*1 + -0.0001756*50 + 0.4433007*0+ 0.8349797*0  + -3.3967878*0 + -0.1238867*3 + 0.0802954*12 + 1.6119919*0 + 0.6837143*0 + -0.2781054*0 + -0.0117627*0
exp(-4.2411574 +  0.3869904*1 + 0.8867192*1 - 0.0001756*50 + 0.4433007*0+ 0.8349797*0  - 3.3967878*0  - 0.1238867*3 + 0.0802954*12 + 1.6119919*0 + 0.6837143*0 + -0.2781054*0 - 0.0117627*0)
-4.2411574 + 0.3869904*1 + 0.8867192*1 - 0.0001756*50 + 0.4433007*0 + 0.8349797*0 - 3.3967878*0 - 0.1238867*3 + 0.0802954*12 + 1.6119919*0 + 0.6837143*0 - 0.2781054*0 - 0.0117627*0
exp(-4.2411574 + 0.3869904*1 + 0.8867192*1 - 0.0001756*50 + 0.4433007*0 + 0.8349797*0 - 3.3967878*0 - 0.1238867*3 + 0.0802954*12 + 1.6119919*0 + 0.6837143*0 - 0.2781054*0 - 0.0117627*0)
-4.2411574 + 0.3869904*1 + 0.8867192*1 - 0.0001756*50 + 0.4433007*0 + 0.8349797*0 - 3.3967878*0 - 0.1238867*3 + 0.0802954*12 + 1.6119919*0 + 0.6837143*1 - 0.2781054*0 - 0.0117627*0
exp(-4.2411574 + 0.3869904*1 + 0.8867192*1 - 0.0001756*50 + 0.4433007*0 + 0.8349797*0 - 3.3967878*0 - 0.1238867*3 + 0.0802954*12 + 1.6119919*0 + 0.6837143*1 - 0.2781054*0 - 0.0117627*0)
1/(1+1/-4.2411574 + 0.3869904*1 + 0.8867192*1 - 0.0001756*50 + 0.4433007*0 + 0.8349797*0 - 3.3967878*0 - 0.1238867*3 + 0.0802954*12 + 1.6119919*0 + 0.6837143*1 - 0.2781054*0 - 0.0117627*0)
-4.2411574 + 0.3869904*1 + 0.8867192*1 - 0.0001756*50 + 0.4433007*0 + 0.8349797*0 - 3.3967878*0 - 0.1238867*3 + 0.0802954*12 + 1.6119919*0 + 0.6837143*1 - 0.2781054*0 - 0.0117627*0
exp()
exp(-4.2411574 + 0.3869904*1 + 0.8867192*1 - 0.0001756*50 + 0.4433007*0 + 0.8349797*0 - 3.3967878*0 - 0.1238867*3 + 0.0802954*12 + 1.6119919*0 + 0.6837143*1 - 0.2781054*0 - 0.0117627*0)
1/(1+1/exp(-4.2411574 + 0.3869904*1 + 0.8867192*1 - 0.0001756*50 + 0.4433007*0 + 0.8349797*0 - 3.3967878*0 - 0.1238867*3 + 0.0802954*12 + 1.6119919*0 + 0.6837143*1 - 0.2781054*0 - 0.0117627*0))
pred = predict(ParoleLog,newdata=test,type=response)
pred = predict(ParoleLog,newdata=test,type="response")
pred
summary(pred)
table(test$violator, pred >=0.5)
12/(12+11)
167/(167+12)
(167+12)/(167+12+12+11)
table(test$violator)
179/(179+23)
table(test$violator, pred >=0.75)
(177+3)/(177+3+2+20)
ROCRpred = prediction(pred, test$violator)#
as.numeric(performance(ROCRpred, "auc")@y.values)
loans = read.csv("loans.csv")
str(loans)
table(loans$not.fully.paid)
8045/(8045+1533)
prop.table(table(loans$not.fully.paid))
summary(loans)
miss1 = subset(loans,is.na(loans))
summary(miss1)
str(miss1)
missing = subset(loans, is.na(log.annual.inc) | is.na(days.with.cr.line) | is.na(revol.util) | is.na(inq.last.6mths) | is.na(delinq.2yrs) | is.na(pub.rec))
summary(missing)
library(mice)
set.seed(144)
vars.for.imputation = setdiff(names(loans),"not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
loans[vars.for.imputation] = imputed
summary(loans)
loans_imputed = read.csv("loans_imputed.csv")
summary
summary(loans_imputed)
sum(loans != loans_imputed)
library(caTools)
split = sample.split(loans$not.fully.paid,SplitRatio=0.7)
train = subset(loans,split == TRUE)
test = subset(loans,split == FALSE)
split
LoansLog = glm(not.fully.paid ~.,data=train,family="binomial")
pred = predict(LoansLog,type="response")
summary(LoansLog)
7.983e-03*10
exp(0.07983)
exp(-4.2411574 + 0.3869904*1 + 0.8867192*1 - 0.0001756*50 + 0.4433007*0 + 0.8349797*0 - 3.3967878*0 - 0.1238867*3 + 0.0802954*12 + 1.6119919*0 + 0.6837143*1 - 0.2781054*0 - 0.0117627*0)
exp(-0.07983)
-7.983e-03*(700-710)
exp(0.07983)
set.seed(144)
library(caTools)
split = sample.split(loans$not.fully.paid,SplitRatio=0.7)
train = subset(loans,split == TRUE)
test = subset(loans,split == FALSE)
LoansLog = glm(not.fully.paid ~.,data=train,family="binomial")
summary(LoansLog)
10*-9.406e-0
10*-9.406e-03
exp(0.09406)
pred = predict(LoansLog,type="response")
table(test$not.fully.paid,pred >= 0.5)
pred = predict(LoansLog,newdata=test, type="response")
pred = predict(LoansLog, newdata=test,type="response")
pred = predict(LoansLog, newdata=test, type="response")
nrow(test)
nrow(train)
predloans = predict(LoansLog, newdata=test, type="response")
TestPrediction = predict(LoansLog, newdata=test, type="response")
str(TestPrediction)
table(test$not.fully.paid,pred >= 0.5)
table(test$not.fully.paid,TestPrediction >= 0.5)
predicted.risk = predict(LoansLog, newdata=test, type="response")
table(test$not.fully.paid,predicted.risk >= 0.5)
(2400+3)/(2400+3+13+457)
table(test$not.fully.paid)
2413/(2413+460)
nrow(predicted.risk)
str(predicted.risk)
summary(predicted.risk)
count.fields(predicted.risk)
length(predicted.risk)
nrow(test)
test$predicted.risk = predicted.risk
str(test)
library(ROCR)#
ROCRpred = prediction(predicted.risk, test$not.fully.paid)#
as.numeric(performance(ROCRpred, "auc")@y.values)
LoansBiLog = glm(not.fully.paid ~ int.rate, data=train,family="binomial")
summary(LoansBiLog)
cor(train)
summary(train)
cor(loans)
cor(loans$)
cor(loans$int.rate)
cor(loans$not.fully.paid,loans$int.rate)
cor(loans)
str(loans)
cor(loans[,unlist(lapply(loans, is.numeric))])
predicted.bi = predict(LoansBiLog, newdata=test, type="response")
max(predicted.bi)
which.max(predicted.bi)
predicted.bi[1780]
predicted.bi[5869]
library(ROCR)#
ROCRpred = prediction(predicted.bi, test$not.fully.paid)#
as.numeric(performance(ROCRpred, "auc")@y.values)
10*exp(0.06*3)
test$profit = exp(test$int.rate*3) -1
test$profit[test$not.fully.paid == 1] = -1
str(test)
max(test$profit)
max(test$profit)*10
highInterest = subset(test,int.rate >=0.15)
str(highInterest)
avg(highInterest$profit)
mean(highInterest$profit)
table(highInterest$not.fully.paid)
110/(110+327)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
cutoff
highInterest100 = subset(test,int.rate >=0.15 & predicted.risk >= cutoff)
str(highInterest100)
highInterest100 = subset(test,int.rate >=0.15 & predicted.risk <= cutoff)
str(highInterest100)
mean(highInterest100$profit)
table(highInterest100$predicted.risk)
table(highInterest100$not.fully.paid)
str(highInterest100)
sum(highInterest100$profit)
loans = read.csv("loans.csv")#
> str(loans)
baseball = read.csv("baseball.csv")
str(baseball)
table(baseball$Team,baseball$Year)
table(baseball$Year)
length(table(baseball$Year))
baseball = subset(baseball,Playoffs =1)
str(baseball)
baseball = subset(baseball,Playoffs == 1)
str(baseball)
table(baseball$Team)
lenght(table(baseball$Team))
length(table(baseball$Team))
table(baseball$Team,baseball$Year)
table(baseball$Team,baseball$Playoffs)
table(baseball$Year)
PlayoffTable = table(baseball$Year)
PlayoffTable
names(PlayoffTable)
type(names(PlayoffTable))
type(PlayoffTable)
PlayoffTable["1990","2001"]
PlayoffTable[1990,2001]
PlayoffTable(1990,2001)
PlayoffTable[c("1990","2001")]
PlayoffTable[baseball$year]
PlayoffTable[baseball$Year]
PlayoffTable(baseball$Year)
PlayoffTable[as.character(baseball$Year)]
baseball$NumCompetitors = PlayoffTable[as.character(baseball$Year)]
baseball8 = subset(baseball,NumCompetitors == 8)
str(baseball)
str(baseball8)
baseball$WorldSeries = as.numeric(baseball$Playoffs ==1)
str(baseball)
table(baseball$WorldSeries)
baseball$WorldSeries = as.numeric(baseball$RankPlayoffs == 1)
table(baseball$WorldSeries)
BaseballLog = glm(baseball$WorldSeries ~., data=baseball,family="binomial")
BaseballLog = glm(baseball$WorldSeries ~., data=baseball,family="binomial")
summary(BaseballLog)
str(baseball)
BaseballLog = glm(WorldSeries ~., data=baseball,family="binomial")
BaseballLog = glm(WorldSeries ~.,  data=baseball, family="binomial")
summary(glm(WorldSeries~Year, data=baseball, family="binomial"))
summary(glm(WorldSeries~., data=baseball, family="binomial"))
summary(glm(WorldSeries~Year, data=baseball, family="binomial"))
str(baseball)
summary(glm(WorldSeries~. -Team, data=baseball, family="binomial"))
str(baseball)
summary(glm(WorldSeries~ League, data=baseball, family="binomial"))
summary(glm(WorldSeries~ Year, data=baseball, family="binomial"))
str(baseball)
summary(glm(WorldSeries~ RS, data=baseball, family="binomial"))
str(baseball)
summary(glm(WorldSeries~ RA , data=baseball, family="binomial"))
str(baseball)
summary(glm(WorldSeries~ W , data=baseball, family="binomial"))
str(baseball)
summary(glm(WorldSeries~ OBP , data=baseball, family="binomial"))
str(baseball)
summary(glm(WorldSeries~ SLG , data=baseball, family="binomial"))
str(baseball)
summary(glm(WorldSeries~ BA , data=baseball, family="binomial"))
str(baseball)
summary(glm(WorldSeries~ RankSeason  , data=baseball, family="binomial"))
str(baseball)
summary(glm(WorldSeries~ OOBP  , data=baseball, family="binomial"))
str(baseball)
summary(glm(WorldSeries~ OSLG  , data=baseball, family="binomial"))
str(baseball)
summary(glm(WorldSeries~ NumCompetitors  , data=baseball, family="binomial"))
summary(glm(WorldSeries~ . -  Team - Playoffs - RankPlayoffs - G, data=baseball, family="binomial"))
cor(baseball)
cor(unlist(,as.numeric(baseball)))
cor(unlist[,as.numeric(baseball)])
cor(baseball[,unlist(lapply(as.numeric(baseball))])
cor(baseball[,unlist(lapply(baseball,as.numeric))])
cor(baseball[,unlist(lapply(baseball,is.numeric))])
which.max(cor(baseball[,unlist(lapply(baseball,is.numeric))]))
baseball[,unlist(lapply(baseball,is.numeric))]
cor(baseball[,unlist(lapply(baseball,is.numeric))])
cor(baseball[c(“Year”, “RA”, “RankSeason”, “NumCompetitors”)])
cor(baseball[c("Year", "RA", "RankSeason", "NumCompetitors")])
mod1 = glm(WorldSeries ~ Year, data=baseball, family="binomial")
summary(mod1)
mod2 = glm(WorldSeries ~ RA, data=baseball, family="binomial")
summary(mod2)
mod3 = glm(WorldSeries ~ RankSeason, data=baseball, family="binomial")
summary(mod3)
mod4 = glm(WorldSeries ~ NumCompetitors, data=baseball, family="binomial")
summary(mod4)
mod5 = glm(WorldSeries ~ Year + NumCompetitors, data=baseball, family="binomial")
mod6 = glm(WorldSeries ~ RA + NumCompetitors, data=baseball, family="binomial")
mod7 = glm(WorldSeries ~ RankSeason+ NumCompetitors, data=baseball, family="binomial")
mod8 = glm(WorldSeries ~ RA + RankSeason, data=baseball, family="binomial")
mod9 = glm(WorldSeries ~ Year + RankSeason, data=baseball, family="binomial")
mod10 = glm(WorldSeries ~ Year + RA, data=baseball, family="binomial")
summary(mod5)
summary(mod6)
summary(mod7)
summary(mod8)
summary(mod9)
summary(mod10)
mod1$aic
mod2$aic
mod3$aic
mod4$aic
mod5$aic
mod6$aic
mod7$aic
mod8$aic
mod9$aic
mod10$aic
